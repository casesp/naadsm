--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Microsoft Access Driver.
--    Document    : C:\Documents and Settings\apreeves\My Documents\NAADSM\DatabaseSchemas\DBSchema3_1_9.vsd.
--    Time Created: April 17, 2007 9:20 AM.
--    Operation   : From Visio Update Database Wizard.
--    Connected data source : naadsm-3_1_x
--    Connected server      : ACCESS
--    Connected database    : C:\DOCUMENTS AND SETTINGS\APREEVES\My Documents\NAADSM\DatabaseSchemas\naadsm3_1_x.mdb

create table `inGeneral_IM0` ( 
	`inGeneralID` VARCHAR(10),
	`scenarioDescr` LONGTEXT,
	`iterations` INTEGER,
	`days` INTEGER,
	`simStopReason` VARCHAR(25),
	`includeContactSpread` BIT,
	`includeAirborneSpread` BIT,
	`useAirborneExponentialDecay` BIT,
	`useWithinHerdPrevalence` BIT,
	`includeCosts` BIT,
	`useFixedRandomSeed` BIT,
	`randomSeed` INTEGER,
	`saveAllDailyOutputs` BIT,
	`saveDailyOutputsForIterations` INTEGER,
	`writeDailyStatesFile` BIT,
	`dailyStatesFileName` VARCHAR(255),
	`saveDailyEvents` BIT,
	`saveDailyExposures` BIT,
	`useCustomOutputs` BIT,
	`writeNAADSMapOutput` BIT,
	`NAADSMapDirectory` VARCHAR(255)); 

insert into `inGeneral_IM0` (`inGeneralID`, `scenarioDescr`, `iterations`, `days`, `simStopReason`, `includeContactSpread`, `includeAirborneSpread`, `useAirborneExponentialDecay`, `useWithinHerdPrevalence`, `includeCosts`, `useFixedRandomSeed`, `randomSeed`, `saveAllDailyOutputs`, `saveDailyOutputsForIterations`, `writeDailyStatesFile`, `dailyStatesFileName`, `saveDailyEvents`, `saveDailyExposures`, `useCustomOutputs`, `writeNAADSMapOutput`, `NAADSMapDirectory`) 
    select `inGeneral`.`inGeneralID`, 
           `inGeneral`.`scenarioDescr`, 
           `inGeneral`.`iterations`, 
           `inGeneral`.`days`, 
           `inGeneral`.`simStopReason`, 
           `inGeneral`.`includeContactSpread`, 
           `inGeneral`.`includeAirborneSpread`, 
           `inGeneral`.`useAirborneExponentialDecay`, 
           `inGeneral`.`useWithinHerdPrevalence`, 
           `inGeneral`.`includeCosts`, 
           `inGeneral`.`useFixedRandomSeed`, 
           `inGeneral`.`randomSeed`, 
           `inGeneral`.`saveAllDailyOutputs`, 
           `inGeneral`.`saveDailyOutputsForIterations`, 
           `inGeneral`.`writeDailyStatesFile`, 
           `inGeneral`.`dailyStatesFileName`, 
           `inGeneral`.`saveDailyEvents`, 
           `inGeneral`.`saveDailyExposures`, 
           `inGeneral`.`useCustomOutputs`, 
           `inGeneral`.`writeNAADSMapOutput`, 
           `inGeneral`.`NAADSMapDirectory`  
    from `inGeneral`;


drop table `inGeneral`; 

create table `inGeneral` ( 
	`inGeneralID` VARCHAR(10),
	`scenarioDescr` LONGTEXT,
	`iterations` INTEGER,
	`days` INTEGER,
	`simStopReason` VARCHAR(25),
	`includeContactSpread` BIT,
	`includeAirborneSpread` BIT,
	`useAirborneExponentialDecay` BIT,
	`useWithinHerdPrevalence` BIT,
	`includeCosts` BIT,
	`costTrackDestruction` BIT,
	`costTrackVaccination` BIT,
	`costTrackZoneSurveillance` BIT,
	`useFixedRandomSeed` BIT,
	`randomSeed` INTEGER,
	`saveAllDailyOutputs` BIT,
	`saveDailyOutputsForIterations` INTEGER,
	`writeDailyStatesFile` BIT,
	`dailyStatesFileName` VARCHAR(255),
	`saveDailyEvents` BIT,
	`saveDailyExposures` BIT,
	`useCustomOutputs` BIT,
	`writeNAADSMapOutput` BIT,
	`NAADSMapDirectory` VARCHAR(255)); 

insert into `inGeneral` (`inGeneralID`, `scenarioDescr`, `iterations`, `days`, `simStopReason`, `includeContactSpread`, `includeAirborneSpread`, `useAirborneExponentialDecay`, `useWithinHerdPrevalence`, `includeCosts`, `useFixedRandomSeed`, `randomSeed`, `saveAllDailyOutputs`, `saveDailyOutputsForIterations`, `writeDailyStatesFile`, `dailyStatesFileName`, `saveDailyEvents`, `saveDailyExposures`, `useCustomOutputs`, `writeNAADSMapOutput`, `NAADSMapDirectory`) 
    select `inGeneral_IM0`.`inGeneralID`, 
           `inGeneral_IM0`.`scenarioDescr`, 
           `inGeneral_IM0`.`iterations`, 
           `inGeneral_IM0`.`days`, 
           `inGeneral_IM0`.`simStopReason`, 
           `inGeneral_IM0`.`includeContactSpread`, 
           `inGeneral_IM0`.`includeAirborneSpread`, 
           `inGeneral_IM0`.`useAirborneExponentialDecay`, 
           `inGeneral_IM0`.`useWithinHerdPrevalence`, 
           `inGeneral_IM0`.`includeCosts`, 
           `inGeneral_IM0`.`useFixedRandomSeed`, 
           `inGeneral_IM0`.`randomSeed`, 
           `inGeneral_IM0`.`saveAllDailyOutputs`, 
           `inGeneral_IM0`.`saveDailyOutputsForIterations`, 
           `inGeneral_IM0`.`writeDailyStatesFile`, 
           `inGeneral_IM0`.`dailyStatesFileName`, 
           `inGeneral_IM0`.`saveDailyEvents`, 
           `inGeneral_IM0`.`saveDailyExposures`, 
           `inGeneral_IM0`.`useCustomOutputs`, 
           `inGeneral_IM0`.`writeNAADSMapOutput`, 
           `inGeneral_IM0`.`NAADSMapDirectory`  
    from `inGeneral_IM0`;


drop table `inGeneral_IM0`; 


alter table `inGeneral`
	add constraint `inGeneral_PK` primary key (`inGeneralID`) ; 


create index `inGeneralID` on `inGeneral` (
	`inGeneralID` ASC); 

create table `DBSchemaVersion_IM0` ( 
	`VersionNumber` VARCHAR(255),
	`VersionApplication` CHAR(10),
	`VersionDate` DATETIME,
	`VersionInfoURL` VARCHAR(255)); 

insert into `DBSchemaVersion_IM0` (`VersionNumber`, `VersionApplication`, `VersionDate`, `VersionInfoURL`) 
    select `DBSchemaVersion`.`VersionNumber`, 
           `DBSchemaVersion`.`VersionApplication`, 
           `DBSchemaVersion`.`VersionDate`, 
           `DBSchemaVersion`.`VersionInfoURL`  
    from `DBSchemaVersion`;


drop table `DBSchemaVersion`; 

create table `DBSchemaVersion` ( 
	`VersionNumber` VARCHAR(255),
	`VersionApplication` CHAR(10),
	`VersionDate` DATETIME,
	`VersionInfoURL` VARCHAR(255),
	`VersionID` LONG); 

insert into `DBSchemaVersion` (`VersionNumber`, `VersionApplication`, `VersionDate`, `VersionInfoURL`) 
    select `DBSchemaVersion_IM0`.`VersionNumber`, 
           `DBSchemaVersion_IM0`.`VersionApplication`, 
           `DBSchemaVersion_IM0`.`VersionDate`, 
           `DBSchemaVersion_IM0`.`VersionInfoURL`  
    from `DBSchemaVersion_IM0`;


drop table `DBSchemaVersion_IM0`; 


alter table `DBSchemaVersion`
	add constraint `DBSchemaVersion_PK` primary key (`VersionNumber`, `VersionApplication`) ; 

