--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Microsoft Access Driver.
--    Document    : C:\Documents and Settings\apreeves\My Documents\NAADSM\DatabaseSchemas\DBSchema3_1_17_GOLD.vsd.
--    Time Created: September 07, 2007 5:06 PM.
--    Operation   : From Visio Update Database Wizard.
--    Connected data source : naadsm-3_1_x
--    Connected server      : ACCESS
--    Connected database    : C:\DOCUMENTS AND SETTINGS\APREEVES\My Documents\NAADSM\DatabaseSchemas\naadsm3_1_x.mdb
 
create table `readOutputFrequencyCodes` ( 
	`outputFrequencyCode` CHAR(2),
	`definition` VARCHAR(255), constraint `readOutputFrequencyCodes_PK` primary key (`outputFrequencyCode`) ); 

INSERT INTO `readOutputFrequencyCodes` (outputFrequencyCode, definition) VALUES ("II", "One output per iteration");
INSERT INTO `readOutputFrequencyCodes` (outputFrequencyCode, definition) VALUES ("IP", "One output per iteration per production type");
INSERT INTO `readOutputFrequencyCodes` (outputFrequencyCode, definition) VALUES ("IZ", "One output per iteration per zone");
INSERT INTO `readOutputFrequencyCodes` (outputFrequencyCode, definition) VALUES ("ZP", "One output per iteration per zone per production type");

create table `inCustomOutputDefinitions_IM0` ( 
	`defID` COUNTER,
	`outputName` VARCHAR(100),
	`outputTypeCode` CHAR(1),
	`isProdTypeOutput` BIT,
	`isIterationOutput` BIT,
	`sql` LONGTEXT); 

insert into `inCustomOutputDefinitions_IM0` ( `outputName`, `outputTypeCode`, `isProdTypeOutput`, `isIterationOutput`, `sql`) 
    select `inCustomOutputDefinitions`.`outputName`, 
           `inCustomOutputDefinitions`.`outputTypeCode`, 
           `inCustomOutputDefinitions`.`isProdTypeOutput`, 
           `inCustomOutputDefinitions`.`isIterationOutput`, 
           `inCustomOutputDefinitions`.`sql`  
    from `inCustomOutputDefinitions`;


alter table `inCustomOutputDefinitions`
	drop constraint `readOutputTypeCodes_inCustomOutputDefinitions_FK1`;


drop table `inCustomOutputDefinitions`; 

create table `inCustomOutputDefinitions` ( 
	`defID` COUNTER,
	`outputName` VARCHAR(100),
	`outputTypeCode` CHAR(1),
	`outputFrequencyCode` CHAR(2),
	`isProdTypeOutput` BIT,
	`isIterationOutput` BIT,
	`sql` LONGTEXT); 

insert into `inCustomOutputDefinitions` (`outputName`, `outputTypeCode`, `isProdTypeOutput`, `isIterationOutput`, `sql`) 
    select `inCustomOutputDefinitions_IM0`.`outputName`, 
           `inCustomOutputDefinitions_IM0`.`outputTypeCode`,
           `inCustomOutputDefinitions_IM0`.`isProdTypeOutput`, 
           `inCustomOutputDefinitions_IM0`.`isIterationOutput`, 
           `inCustomOutputDefinitions_IM0`.`sql`  
    from `inCustomOutputDefinitions_IM0`;


drop table `inCustomOutputDefinitions_IM0`; 


alter table `inCustomOutputDefinitions`
	add constraint `inCustomOutputDefinitions_PK` primary key (`defID`) ; 

create table `outIterationByZoneAndProductionType_IM0` ( 
	`iteration` INTEGER,
	`zoneID` INTEGER,
	`productionTypeID` INTEGER,
	`unitDays` LONG,
	`animalDays` LONG,
	`costSurveillance` CURRENCY); 

insert into `outIterationByZoneAndProductionType_IM0` (`iteration`, `zoneID`, `productionTypeID`, `unitDays`, `animalDays`, `costSurveillance`) 
    select `outIterationByZoneAndProductionType`.`iteration`, 
           `outIterationByZoneAndProductionType`.`zoneID`, 
           `outIterationByZoneAndProductionType`.`productionTypeID`, 
           `outIterationByZoneAndProductionType`.`unitDays`, 
           `outIterationByZoneAndProductionType`.`animalDays`, 
           `outIterationByZoneAndProductionType`.`costSurveillance`  
    from `outIterationByZoneAndProductionType`;


alter table `outIterationByZoneAndProductionType`
	drop constraint `inZone_outIterationByZoneAndProductionType_FK1`;


alter table `outIterationByZoneAndProductionType`
	drop constraint `inProductionType_outIterationByZoneAndProductionType_FK1`;


drop table `outIterationByZoneAndProductionType`; 

create table `outIterationByZoneAndProductionType` ( 
	`iteration` INTEGER,
	`zoneID` INTEGER,
	`productionTypeID` INTEGER,
	`unitDaysInZone` LONG,
	`animalDaysInZone` LONG,
	`costSurveillance` CURRENCY); 

insert into `outIterationByZoneAndProductionType` (`iteration`, `zoneID`, `productionTypeID`, `unitDaysInZone`, `animalDaysInZone`, `costSurveillance`) 
    select `outIterationByZoneAndProductionType_IM0`.`iteration`, 
           `outIterationByZoneAndProductionType_IM0`.`zoneID`, 
           `outIterationByZoneAndProductionType_IM0`.`productionTypeID`, 
           `outIterationByZoneAndProductionType_IM0`.`unitDays`, 
           `outIterationByZoneAndProductionType_IM0`.`animalDays`, 
           `outIterationByZoneAndProductionType_IM0`.`costSurveillance`  
    from `outIterationByZoneAndProductionType_IM0`;


drop table `outIterationByZoneAndProductionType_IM0`; 

alter table `outIterationByZoneAndProductionType`
	add constraint `outIterationByZoneAndProductionType_PK` primary key (`iteration`, `zoneID`, `productionTypeID`) ; 

create table `outDailyByZoneAndProductionType_IM0` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`zoneID` INTEGER,
	`productionTypeID` INTEGER,
	`unitDays` LONG,
	`animalDays` LONG,
	`unitsInZone` INTEGER,
	`animalsInZone` LONG); 

insert into `outDailyByZoneAndProductionType_IM0` (`iteration`, `day`, `zoneID`, `productionTypeID`, `unitDays`, `animalDays`, `unitsInZone`, `animalsInZone`) 
    select `outDailyByZoneAndProductionType`.`iteration`, 
           `outDailyByZoneAndProductionType`.`day`, 
           `outDailyByZoneAndProductionType`.`zoneID`, 
           `outDailyByZoneAndProductionType`.`productionTypeID`, 
           `outDailyByZoneAndProductionType`.`unitDays`, 
           `outDailyByZoneAndProductionType`.`animalDays`, 
           `outDailyByZoneAndProductionType`.`unitsInZone`, 
           `outDailyByZoneAndProductionType`.`animalsInZone`  
    from `outDailyByZoneAndProductionType`;


alter table `outDailyByZoneAndProductionType`
	drop constraint `inZone_outDailyByZoneAndProductionType_FK1`;


alter table `outDailyByZoneAndProductionType`
	drop constraint `inProductionType_outDailyByZoneAndProductionType_FK1`;


drop table `outDailyByZoneAndProductionType`; 
 
create table `outDailyByZoneAndProductionType` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`zoneID` INTEGER,
	`productionTypeID` INTEGER,
	`unitDaysInZone` LONG,
	`animalDaysInZone` LONG,
	`unitsInZone` LONG,
	`animalsInZone` LONG); 

insert into `outDailyByZoneAndProductionType` (`iteration`, `day`, `zoneID`, `productionTypeID`, `unitDaysInZone`, `animalDaysInZone`, `unitsInZone`, `animalsInZone`) 
    select `outDailyByZoneAndProductionType_IM0`.`iteration`, 
           `outDailyByZoneAndProductionType_IM0`.`day`, 
           `outDailyByZoneAndProductionType_IM0`.`zoneID`, 
           `outDailyByZoneAndProductionType_IM0`.`productionTypeID`, 
           `outDailyByZoneAndProductionType_IM0`.`unitDays`, 
           `outDailyByZoneAndProductionType_IM0`.`animalDays`, 
           `outDailyByZoneAndProductionType_IM0`.`unitsInZone`, 
           `outDailyByZoneAndProductionType_IM0`.`animalsInZone`  
    from `outDailyByZoneAndProductionType_IM0`;


drop table `outDailyByZoneAndProductionType_IM0`; 


alter table `outDailyByZoneAndProductionType`
	add constraint `outDailyByZoneAndProductionType_PK` primary key (`iteration`, `zoneID`, `productionTypeID`, `day`) ; 
 
create table `inSelectDailyOutputs` ( 
	`inSelectDailyOutputID` CHAR(10),
	`stsdUSusc` BIT,
	`stsdASusc` BIT,
	`stsdULat` BIT,
	`stsdALat` BIT,
	`stsdUSubc` BIT,
	`stsdASubc` BIT,
	`stsdUClin` BIT,
	`stsdAClin` BIT,
	`stsdUNImm` BIT,
	`stsdANImm` BIT,
	`stsdUVImm` BIT,
	`stsdAVImm` BIT,
	`stsdUDest` BIT,
	`stsdADest` BIT,
	`stscUSusc` BIT,
	`stscASusc` BIT,
	`stscULat` BIT,
	`stscALat` BIT,
	`stscUSubc` BIT,
	`stscASubc` BIT,
	`stscUClin` BIT,
	`stscAClin` BIT,
	`stscUNImm` BIT,
	`stscANImm` BIT,
	`stscUVImm` BIT,
	`stscAVImm` BIT,
	`stscUDest` BIT,
	`stscADest` BIT,
	`sinfnUAir` BIT,
	`sinfnAAir` BIT,
	`sinfnUDir` BIT,
	`sinfnADir` BIT,
	`sinfnUInd` BIT,
	`sinfnAInd` BIT,
	`sinfcUIni` BIT,
	`sinfcAIni` BIT,
	`sinfcUAir` BIT,
	`sinfcAAir` BIT,
	`sinfcUDir` BIT,
	`sinfcADir` BIT,
	`sinfcUInd` BIT,
	`sinfcAInd` BIT,
	`sexpcUDir` BIT,
	`sexpcADir` BIT,
	`sexpcUInd` BIT,
	`sexpcAInd` BIT,
	`strcUDir` BIT,
	`strcADir` BIT,
	`strcUInd` BIT,
	`strcAInd` BIT,
	`strcUDirp` BIT,
	`strcADirp` BIT,
	`strcUIndp` BIT,
	`strcAIndp` BIT,
	`sdetnUClin` BIT,
	`sdetnAClin` BIT,
	`sdesnUAll` BIT,
	`sdesnAAll` BIT,
	`svaccnUAll` BIT,
	`svaccnAAll` BIT,
	`sdetcUClin` BIT,
	`sdetcAClin` BIT,
	`sdescUIni` BIT,
	`sdescAIni` BIT,
	`sdescUDet` BIT,
	`sdescADet` BIT,
	`sdescUDir` BIT,
	`sdescADir` BIT,
	`sdescUInd` BIT,
	`sdescAInd` BIT,
	`sdescURing` BIT,
	`sdescARing` BIT,
	`svaccUIni` BIT,
	`svaccAIni` BIT,
	`svaccURing` BIT,
	`svaccARing` BIT,
	`szonnFoci` BIT,
	`szoncFoci` BIT,
	`sappUInfectious` BIT,
	`sunitDaysInZone` BIT,
	`sanimalDaysInZone` BIT,
	`sunitsInZone` BIT,
	`sanimalsInZone` BIT, constraint `inSelectDailyOutput_PK` primary key (`inSelectDailyOutputID`) ); 

alter table `outIterationByZoneAndProductionType`
	add constraint `inZone_outIterationByZoneAndProductionType_FK1` foreign key (
		`zoneID`)
	 references `inZone` (
		`zoneID`); 

alter table `outIterationByZoneAndProductionType`
	add constraint `inProductionType_outIterationByZoneAndProductionType_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `outDailyByZoneAndProductionType`
	add constraint `inZone_outDailyByZoneAndProductionType_FK1` foreign key (
		`zoneID`)
	 references `inZone` (
		`zoneID`); 

alter table `outDailyByZoneAndProductionType`
	add constraint `inProductionType_outDailyByZoneAndProductionType_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `inCustomOutputDefinitions`
	add constraint `readOutputTypeCodes_inCustomOutputDefinitions_FK1` foreign key (
		`outputTypeCode`)
	 references `readOutputTypeCodes` (
		`outputTypeCode`); 

alter table `inCustomOutputDefinitions`
	add constraint `readOutputFrequencyCodes_inCustomOutputDefinitions_FK1` foreign key (
		`outputFrequencyCode`)
	 references `readOutputFrequencyCodes` (
		`outputFrequencyCode`); 

