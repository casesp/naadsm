--    This script has been modified by hand from several scripts generated by 
--    Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used  : Microsoft Visual Studio - Microsoft Access Driver.
--    Time Modified: July 12, 2005 1:42 PM.


-- Drop foreign key constraints from table `inHerd`.
alter table `inHerd`
	drop constraint `inProductionType_dynHerd_FK1`;


-- Drop primary key, unique and non-unique index constraints from table `inHerd`.
alter table `inHerd` drop constraint `dynHerd_PK`; 


-- You have specified to drop table(s) in the database.
-- The Drop Table statement may fail if you did not reverse engineer other dependent tables 
-- because the wizard will not generate DDL statements to drop the foreign keys.
-- Drop tables.
drop table `outHerd`; 


-- Rename table from inHerd to dynHerd.
-- `dynHerd` : Table of dynHerd  
create table `dynHerd` ( 
	`herdID` COUNTER,
	`productionTypeID` INTEGER,
	`latitude` DOUBLE,
	`longitude` DOUBLE,
	`initialStateCode` CHAR(1),
	`initialSize` INTEGER,
	`finalStateCode` CHAR(1),
	`finalApparentStateCode` CHAR(1),
	`cumInfected` INTEGER,
	`cumDestroyed` INTEGER,
	`cumVaccinated` INTEGER); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`dynHerd`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'dynHerd' :
-- 	`productionTypeID`


-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`dynHerd`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'dynHerd' :
-- 	`productionTypeID`


insert into `dynHerd` (`herdID`, `productionTypeID`, `latitude`, `longitude`, `initialStateCode`, `initialSize`) 
    select `inHerd`.`herdID`,
           `inHerd`.`productionTypeID`, 
           `inHerd`.`latitude`, 
           `inHerd`.`longitude`, 
           `inHerd`.`initialStateCode`, 
           `inHerd`.`initialSize`  
    from `inHerd`;


drop table `inHerd`; 


-- Update existing table `outGeneral`.
create table `outGeneral_IM0` ( 
	`outGeneralID` CHAR(10),
	`simulationStartTime` DATETIME,
	`simulationEndTime` DATETIME,
	`completedIterations` INTEGER); 

insert into `outGeneral_IM0` (`outGeneralID`, `simulationStartTime`, `simulationEndTime`, `completedIterations`) 
    select `outGeneral`.`outGeneralID`, 
           `outGeneral`.`simulationStartTime`, 
           `outGeneral`.`simulationEndTime`, 
           `outGeneral`.`completedIterations`  
    from `outGeneral`;


drop table `outGeneral`; 


-- `outGeneral` : Table of outGeneral
-- 	`outGeneralID` : outGeneralID identifies outGeneral
-- 	`simulationStartTime` : simulationStartTime is of outGeneral
-- 	`simulationEndTime` : simulationEndTime is of outGeneral
-- 	`completedIterations` : completedIterations is of outGeneral
-- 	`version` : version is of outGeneral  
create table `outGeneral` ( 
	`outGeneralID` CHAR(10),
	`simulationStartTime` DATETIME,
	`simulationEndTime` DATETIME,
	`completedIterations` INTEGER,
	`version` VARCHAR(50)); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`outGeneral`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'outGeneral' :
-- 	`outGeneralID`


insert into `outGeneral` (`outGeneralID`, `simulationStartTime`, `simulationEndTime`, `completedIterations`) 
    select `outGeneral_IM0`.`outGeneralID`, 
           `outGeneral_IM0`.`simulationStartTime`, 
           `outGeneral_IM0`.`simulationEndTime`, 
           `outGeneral_IM0`.`completedIterations`  
    from `outGeneral_IM0`;


drop table `outGeneral_IM0`; 


alter table `outGeneral`
	add constraint `outGeneral_PK` primary key (`outGeneralID`) ; 


-- Add the remaining keys, constraints and indexes for the table `dynHerd`.
alter table `dynHerd`
	add constraint `dynHerd_PK` primary key (`herdID`) ; 


-- Add foreign key constraints to table `dynHerd`.
alter table `dynHerd`
	add constraint `inProductionType_dynHerd_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 


-- Drop existing table `outDailyByProductionType`. 
alter table `outDailyByProductionType`
	drop constraint `inProductionType_outDailyByProductionType_FK1`;

drop table `outDailyByProductionType`; 

-- -----------------------------
-- (Re)create the output tables
-- -----------------------------

-- Create new table `outDailyByProductionType`.
-- `outDailyByProductionType` : Table of outDailyByProductionType
-- 	`tsdUSusc` : Number of susceptible units on the given day
-- 	`tsdASusc` : Number of animals in susceptible units on the given day
-- 	Number of animals in susceptible units on the given day
-- 	`tsdULat` : Number of latent units on the given day
-- 	`tsdALat` : Number of animals in latent units on the given day
-- 	`tsdUSubc` : Number of subclinically infectious units on the given day
-- 	`tsdASubc` : Number of animals in subclinically infected units on the given day
-- 	`tsdUClin` : Number of clinical units on the given day
-- 	`tsdAClin` : Number of animals in clinical units on the given day
-- 	`tsdUNImm` : Number of naturally immune units on the given day
-- 	`tsdANImm` : Number of animals in naturally immune units on the given day
-- 	`tsdUVImm` : Number of vaccine-immune units on the given day
-- 	`tsdAVImm` : Number of animals in vaccine-immune units on the given day
-- 	`tsdUDest` : Number of units with the state "destroyed" on the given day (NOT the number of units destroyed on the given day!!)
-- 	`tsdADest` : Number of animals in units with the state "destroyed" on the given day (NOT the number of animals in units destroyed on the given day!!)
-- 	`tscUSusc` : Number of units that are or become susceptible over the course of an iteration
-- 	`tscASusc` : Total number of animals in all units that are or become susceptible over the course of an iteration
-- 	`tscULat` : Number of units that are or become latent over the course of an iteration
-- 	`tscALat` : Total number of animals in all units that are or become latent over the course of an iteration
-- 	`tscUSubc` : Number of units that are or become subclinically infectious over the course of an iteration
-- 	`tscASubc` : Total number of animals in all units that are or become infectious over the course of an iteration
-- 	`tscUClin` : Number of units that are or become clinical over the course of an iteration
-- 	`tscAClin` : Total number of animals in all units that are or become clinical over the course of an iteration
-- 	`tscUNImm` : Number of units that are or become naturally immune over the course of an iteration
-- 	`tscANImm` : Total number of animals in all units that are or become naturally immune over the course of an iteration
-- 	`tscUVImm` : Number of units that are or become vaccine immune over the course of an iteration
-- 	`tscAVImm` : Total number of animals in all units that are or become vaccine immune over the course of an iteration
-- 	`tscUDest` : Number of units that are destroyed over the course of an iteration
-- 	`tscADest` : Total number of animals in all units that are destroyed over the course of an iteration
-- 	`infnUAir` : Number of new units infected on this day by airborne spread
-- 	`infnAAir` : Number of animals in new units infected on this day by airborne spread
-- 	`infnUDir` : Number of new units infected on this day by direct contact
-- 	`infnADir` : Number of animals in new units infected on this day by direct contact
-- 	`infnUInd` : Number of new units infected on this day by indirect contact
-- 	`infnAInd` : Number of animals in new units infected on this day by indirect contact
-- 	`infcUIni` : Number of units that are initially infected at the beginning of an iteration
-- 	`infcAIni` : Number of animals in units that are initially infected at the beginning of an iteration
-- 	`infcUAir` : Number of units that become infected by airborne spread over the course of an iteration
-- 	`infcAAir` : Number of animals in units that become infected by airborne spread over the course of an iteration
-- 	`infcUDir` : Number of units that become infected by direct contact over the course of an iteration
-- 	`infcADir` : Number of animals in units that become infected by direct contact over the course of an iteration
-- 	`infcUInd` : Number of units that become infected by indirect contact over the course of an iteration
-- 	`infcAInd` : Number of animals in units that become infected by indirect contact over the course of an iteration
-- 	`expcUDir` : Total number of units directly exposed to any infected unit over the course of an iteration
-- 	`expcADir` : Total number of animals in units directly exposed to any infected unit over the course of an iteration
-- 	`expcUInd` : Total number of units indirectly exposed to any infected unit over the course of an iteration
-- 	`expcAInd` : Total number of animals in units indirectly exposed to any infected unit over the course of an iteration
-- 	`trcUDir` : Number of units directly exposed and successfully traced over the course of an iteration
-- 	`trcADir` : Total number of animals in all units directly exposed and successfully traced over the course of an iteration
-- 	`trcUInd` : Number of units indirectly exposed and successfully traced over the course of an iteration
-- 	`trcAInd` : Total number of animals in all units indirectly exposed and successfully traced over the course of an iteration
-- 	`trcUDirp` : Number of units directly exposed that could possibly have been traced over the course of an iteration
-- 	`trcADirp` : Total number of animals in all units directly exposed that could possibly have been traced over the course of an iteration
-- 	`trcUIndp` : Number of units indirectly exposed that could possibly have been traced over the course of an iteration
-- 	`trcAIndp` : Total number of animals in units indirectly exposed that could possibly have been traced over the course of an iteration
-- 	`detnUClin` : Number of units detected by clinical signs on this day
-- 	`detnAClin` : Total number of animals in units detected by clinical signs on this day
-- 	`detcUClin` : Number of units detected by clinical signs over the course of an iteration
-- 	`detcAClin` : Total number of animals in all units detected by clinical signs over the course of an iteration
-- 	`descUDet` : Number of units destroyed because they were detected positive over the course of an iteration
-- 	`descADet` : Total number of animals in all units destroyed because they were detected positive over the course of an iteration
-- 	`descUDir` : Number of units destroyed because they were direct traces over the course of an iteration
-- 	`descADir` : Total number of animals in units destroyed because they were direct traces over the course of an iteration
-- 	`descUInd` : Number of units destroyed because they were indirect traces over the course of an iteration
-- 	`descAInd` : Total number of animals in units destroyed because they were indirect traces over the course of an iteration
-- 	`descURing` : Number of units destroyed because they were in a destruction ring over the course of an iteration
-- 	`descARing` : Total number of animals in all units destroyed because they were in a destruction ring over the course of an iteration
-- 	`vaccURing` : Number of units vaccinated in rings around detected-infected units over the course of an iteration
-- 	`vaccARing` : Total number of animals in all units vaccinated in rings around detected-infected units over the course of an iteration  
create table `outDailyByProductionType` ( 
	`outDailyByPTID` COUNTER,
	`iteration` INTEGER,
	`day` INTEGER,
	`productionTypeID` INTEGER,
	`tsdUSusc` INTEGER,
	`tsdASusc` INTEGER,
	`tsdULat` INTEGER,
	`tsdALat` INTEGER,
	`tsdUSubc` INTEGER,
	`tsdASubc` INTEGER,
	`tsdUClin` INTEGER,
	`tsdAClin` INTEGER,
	`tsdUNImm` INTEGER,
	`tsdANImm` INTEGER,
	`tsdUVImm` INTEGER,
	`tsdAVImm` INTEGER,
	`tsdUDest` INTEGER,
	`tsdADest` INTEGER,
	`tscUSusc` INTEGER,
	`tscASusc` INTEGER,
	`tscULat` INTEGER,
	`tscALat` INTEGER,
	`tscUSubc` INTEGER,
	`tscASubc` INTEGER,
	`tscUClin` INTEGER,
	`tscAClin` INTEGER,
	`tscUNImm` INTEGER,
	`tscANImm` INTEGER,
	`tscUVImm` INTEGER,
	`tscAVImm` INTEGER,
	`tscUDest` INTEGER,
	`tscADest` INTEGER,
	`infnUAir` INTEGER,
	`infnAAir` INTEGER,
	`infnUDir` INTEGER,
	`infnADir` INTEGER,
	`infnUInd` INTEGER,
	`infnAInd` INTEGER,
	`infcUIni` INTEGER,
	`infcAIni` INTEGER,
	`infcUAir` INTEGER,
	`infcAAir` INTEGER,
	`infcUDir` INTEGER,
	`infcADir` INTEGER,
	`infcUInd` INTEGER,
	`infcAInd` INTEGER,
	`expcUDir` INTEGER,
	`expcADir` INTEGER,
	`expcUInd` INTEGER,
	`expcAInd` INTEGER,
	`trcUDir` INTEGER,
	`trcADir` INTEGER,
	`trcUInd` INTEGER,
	`trcAInd` INTEGER,
	`trcUDirp` INTEGER,
	`trcADirp` INTEGER,
	`trcUIndp` INTEGER,
	`trcAIndp` INTEGER,
	`detnUClin` INTEGER,
	`detnAClin` INTEGER,
	`detcUClin` INTEGER,
	`detcAClin` INTEGER,
	`descUDet` INTEGER,
	`descADet` INTEGER,
	`descUDir` INTEGER,
	`descADir` INTEGER,
	`descUInd` INTEGER,
	`descAInd` INTEGER,
	`descURing` INTEGER,
	`descARing` INTEGER,
	`vaccURing` INTEGER,
	`vaccARing` INTEGER, constraint `outDailyEpiByProductionType_PK` primary key (`outDailyByPTID`) ); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`outDailyByProductionType`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'outDailyByProductionType' :
-- 	`outDailyByPTID`
-- 	`productionTypeID`


-- Create new table `outIterationByProductionType`.
-- `outIterationByProductionType` : Table of outIterationByProductionType
-- 	`tscUSusc` : Number of units that are or become susceptible over the course of an iteration
-- 	`tscASusc` : Total number of animals in all units that are or become susceptible over the course of an iteration
-- 	`tscULat` : Number of units that are or become latent over the course of an iteration
-- 	`tscALat` : Total number of animals in all units that are or become latent over the course of an iteration
-- 	`tscUSubc` : Number of units that are or become subclinically infectious over the course of an iteration
-- 	`tscASubc` : Total number of animals in all units that are or become infectious over the course of an iteration
-- 	`tscUClin` : Number of units that are or become clinical over the course of an iteration
-- 	`tscAClin` : Total number of animals in all units that are or become clinical over the course of an iteration
-- 	`tscUNImm` : Number of units that are or become naturally immune over the course of an iteration
-- 	`tscANImm` : Total number of animals in all units that are or become naturally immune over the course of an iteration
-- 	`tscUVImm` : Number of units that are or become vaccine immune over the course of an iteration
-- 	`tscAVImm` : Total number of animals in all units that are or become vaccine immune over the course of an iteration
-- 	`tscUDest` : Number of units that are destroyed over the course of an iteration
-- 	`tscADest` : Total number of animals in all units that are destroyed over the course of an iteration
-- 	`infcUIni` : Number of units that are initially infected at the beginning of an iteration
-- 	`infcAIni` : Number of animals in units that are initially infected at the beginning of an iteration
-- 	`infcUAir` : Number of units that become infected by airborne spread over the course of an iteration
-- 	`infcAAir` : Number of animals in units that become infected by airborne spread over the course of an iteration
-- 	`infcUDir` : Number of units that become infected by direct contact over the course of an iteration
-- 	`infcADir` : Number of animals in units that become infected by direct contact over the course of an iteration
-- 	`infcUInd` : Number of units that become infected by indirect contact over the course of an iteration
-- 	`infcAInd` : Number of animals in units that become infected by indirect contact over the course of an iteration
-- 	`expcUDir` : Total number of units directly exposed to any infected unit over the course of an iteration
-- 	`expcADir` : Total number of animals in units directly exposed to any infected unit over the course of an iteration
-- 	`expcUInd` : Total number of units indirectly exposed to any infected unit over the course of an iteration
-- 	`expcAInd` : Total number of animals in units indirectly exposed to any infected unit over the course of an iteration
-- 	`trcUDir` : Number of units directly exposed and successfully traced over the course of an iteration
-- 	`trcADir` : Total number of animals in all units directly exposed and successfully traced over the course of an iteration
-- 	`trcUInd` : Number of units indirectly exposed and successfully traced over the course of an iteration
-- 	`trcAInd` : Total number of animals in all units indirectly exposed and successfully traced over the course of an iteration
-- 	`trcUDirp` : Number of units directly exposed that could possibly have been traced over the course of an iteration
-- 	`trcADirp` : Total number of animals in all units directly exposed that could possibly have been traced over the course of an iteration
-- 	`trcUIndp` : Number of units indirectly exposed that could possibly have been traced over the course of an iteration
-- 	`trcAIndp` : Total number of animals in units indirectly exposed that could possibly have been traced over the course of an iteration
-- 	`detcUClin` : Number of units detected by clinical signs over the course of an iteration
-- 	`detcAClin` : Total number of animals in all units detected by clinical signs over the course of an iteration
-- 	`descUDet` : Number of units destroyed because they were detected positive over the course of an iteration
-- 	`descADet` : Total number of animals in all units destroyed because they were detected positive over the course of an iteration
-- 	`descUDir` : Number of units destroyed because they were direct traces over the course of an iteration
-- 	`descADir` : Total number of animals in units destroyed because they were direct traces over the course of an iteration
-- 	`descUInd` : Number of units destroyed because they were indirect traces over the course of an iteration
-- 	`descAInd` : Total number of animals in units destroyed because they were indirect traces over the course of an iteration
-- 	`descURing` : Number of units destroyed because they were in a destruction ring over the course of an iteration
-- 	`descARing` : Total number of animals in all units destroyed because they were in a destruction ring over the course of an iteration
-- 	`vaccURing` : Number of units vaccinated in rings around detected-infected units over the course of an iteration
-- 	`vaccARing` : Total number of animals in all units vaccinated in rings around detected-infected units over the course of an iteration  
create table `outIterationByProductionType` ( 
	`outIterationByPTID` COUNTER,
	`iteration` INTEGER,
	`productionTypeID` INTEGER,
	`tscUSusc` INTEGER,
	`tscASusc` INTEGER,
	`tscULat` INTEGER,
	`tscALat` INTEGER,
	`tscUSubc` INTEGER,
	`tscASubc` INTEGER,
	`tscUClin` INTEGER,
	`tscAClin` INTEGER,
	`tscUNImm` INTEGER,
	`tscANImm` INTEGER,
	`tscUVImm` INTEGER,
	`tscAVImm` INTEGER,
	`tscUDest` INTEGER,
	`tscADest` INTEGER,
	`infcUIni` INTEGER,
	`infcAIni` INTEGER,
	`infcUAir` INTEGER,
	`infcAAir` INTEGER,
	`infcUDir` INTEGER,
	`infcADir` INTEGER,
	`infcUInd` INTEGER,
	`infcAInd` INTEGER,
	`expcUDir` INTEGER,
	`expcADir` INTEGER,
	`expcUInd` INTEGER,
	`expcAInd` INTEGER,
	`trcUDir` INTEGER,
	`trcADir` INTEGER,
	`trcUInd` INTEGER,
	`trcAInd` INTEGER,
	`trcUDirp` INTEGER,
	`trcADirp` INTEGER,
	`trcUIndp` INTEGER,
	`trcAIndp` INTEGER,
	`detcUClin` INTEGER,
	`detcAClin` INTEGER,
	`descUDet` INTEGER,
	`descADet` INTEGER,
	`descUDir` INTEGER,
	`descADir` INTEGER,
	`descUInd` INTEGER,
	`descAInd` INTEGER,
	`descURing` INTEGER,
	`descARing` INTEGER,
	`vaccURing` INTEGER,
	`vaccARing` INTEGER, constraint `outDailyEpiByProductionType_PK` primary key (`outIterationByPTID`) ); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`outIterationByProductionType`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'outIterationByProductionType' :
-- 	`outIterationByPTID`
-- 	`productionTypeID`


-- Add foreign key constraints to table `outDailyByProductionType`.
alter table `outDailyByProductionType`
	add constraint `inProductionType_outDailyByProductionType_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

-- Add foreign key constraints to table `outIterationByProductionType`.
alter table `outIterationByProductionType`
	add constraint `inProductionType_outIterationByProductionType_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 


 -- End of script
 
 

