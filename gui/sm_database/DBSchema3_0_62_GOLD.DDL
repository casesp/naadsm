--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Microsoft Access Driver.
--    Document    : E:\SpreadModel\_Databases\DBSchema3_0_62_GOLD.vsd.
--    Time Created: August 22, 2005 3:14 PM.
--    Operation   : From Visio Update Database Wizard.
--    Connected data source : NADTemplate3_0_50
--    Connected server      : ACCESS
--    Connected database    : E:\SPREADMODEL\_Databases\template-3_0_50.mdb

create table `outDailyEvents` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`event` INTEGER,
	`herdID` INTEGER,
	`eventCode` CHAR(1),
	`newStateCode` CHAR(1), 
	`traceSuccess` BIT, constraint `outDailyEvents_PK` primary key (`day`, `iteration`, `event`) ); 

create table `outDailyExposures` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`exposure` INTEGER,
	`exposedHerdID` INTEGER,
	`exposingHerdID` INTEGER,
	`spreadMethodCode` CHAR(1),
	`success` BIT, constraint `outDailyExposures_PK` primary key (`day`, `exposure`, `iteration`) ); 

create table `inGeneral_IM0` ( 
	`inGeneralID` VARCHAR(10),
	`scenarioDescr` VARCHAR(255),
	`iterations` INTEGER,
	`days` INTEGER,
	`includeContactSpread` BIT,
	`includeAirborneSpread` BIT,
	`includeEconomics` BIT,
	`useFixedRandomSeed` BIT,
	`randomSeed` INTEGER,
	`useFixedPoissonValue` BIT,
	`poissonValue` DOUBLE,
	`saveAllDailyOutputs` BIT,
	`saveDailyOutputsForIterations` INTEGER,
	`writeDailyStatesFile` BIT,
	`dailyStatesFileName` VARCHAR(255)); 

insert into `inGeneral_IM0` (`inGeneralID`, `scenarioDescr`, `iterations`, `days`, `includeContactSpread`, `includeAirborneSpread`, `includeEconomics`, `useFixedRandomSeed`, `randomSeed`, `useFixedPoissonValue`, `poissonValue`, `saveAllDailyOutputs`, `saveDailyOutputsForIterations`, `writeDailyStatesFile`, `dailyStatesFileName`) 
    select `inGeneral`.`inGeneralID`, 
           `inGeneral`.`scenarioDescr`, 
           `inGeneral`.`iterations`, 
           `inGeneral`.`days`, 
           `inGeneral`.`includeContactSpread`, 
           `inGeneral`.`includeAirborneSpread`, 
           `inGeneral`.`includeEconomics`, 
           `inGeneral`.`useFixedRandomSeed`, 
           `inGeneral`.`randomSeed`, 
           `inGeneral`.`useFixedPoissonValue`, 
           `inGeneral`.`poissonValue`, 
           `inGeneral`.`saveAllDailyOutputs`, 
           `inGeneral`.`saveDailyOutputsForIterations`, 
           `inGeneral`.`writeDailyStatesFile`, 
           `inGeneral`.`dailyStatesFileName`  
    from `inGeneral`;


drop table `inGeneral`; 

create table `inGeneral` ( 
	`inGeneralID` VARCHAR(10),
	`scenarioDescr` VARCHAR(255),
	`iterations` INTEGER,
	`days` INTEGER,
	`simStopReason` VARCHAR(25),
	`includeContactSpread` BIT,
	`includeAirborneSpread` BIT,
	`includeEconomics` BIT,
	`useFixedRandomSeed` BIT,
	`randomSeed` INTEGER,
	`useFixedPoissonValue` BIT,
	`poissonValue` DOUBLE,
	`saveAllDailyOutputs` BIT,
	`saveDailyOutputsForIterations` INTEGER,
	`writeDailyStatesFile` BIT,
	`dailyStatesFileName` VARCHAR(255),
	`saveDailyEvents` BIT,
	`saveDailyExposures` BIT); 

insert into `inGeneral` (`inGeneralID`, `scenarioDescr`, `iterations`, `days`, `includeContactSpread`, `includeAirborneSpread`, `includeEconomics`, `useFixedRandomSeed`, `randomSeed`, `useFixedPoissonValue`, `poissonValue`, `saveAllDailyOutputs`, `saveDailyOutputsForIterations`, `writeDailyStatesFile`, `dailyStatesFileName`) 
    select `inGeneral_IM0`.`inGeneralID`, 
           `inGeneral_IM0`.`scenarioDescr`, 
           `inGeneral_IM0`.`iterations`, 
           `inGeneral_IM0`.`days`, 
           `inGeneral_IM0`.`includeContactSpread`, 
           `inGeneral_IM0`.`includeAirborneSpread`, 
           `inGeneral_IM0`.`includeEconomics`, 
           `inGeneral_IM0`.`useFixedRandomSeed`, 
           `inGeneral_IM0`.`randomSeed`, 
           `inGeneral_IM0`.`useFixedPoissonValue`, 
           `inGeneral_IM0`.`poissonValue`, 
           `inGeneral_IM0`.`saveAllDailyOutputs`, 
           `inGeneral_IM0`.`saveDailyOutputsForIterations`, 
           `inGeneral_IM0`.`writeDailyStatesFile`, 
           `inGeneral_IM0`.`dailyStatesFileName`  
    from `inGeneral_IM0`;

drop table `inGeneral_IM0`; 

alter table `inGeneral`
	add constraint `inGeneral_PK` primary key (`inGeneralID`) ; 

create index `inGeneralID` on `inGeneral` (
	`inGeneralID` ASC); 

alter table `outDailyEvents`
	add constraint `dynHerd_outDailyEvents_FK1` foreign key (
		`herdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `outDailyExposures`
	add constraint `dynHerd_outDailyExposures_FK1` foreign key (
		`exposedHerdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `outDailyExposures`
	add constraint `dynHerd_outDailyExposures_FK2` foreign key (
		`exposingHerdID`)
	 references `dynHerd` (
		`herdID`); 

create table `dynHerd_IM0` ( 
	`herdID` COUNTER,
	`productionTypeID` INTEGER,
	`latitude` DOUBLE,
	`longitude` DOUBLE,
	`initialStateCode` CHAR(1),
	`initialSize` INTEGER,
	`finalStateCode` CHAR(1),
	`finalApparentStateCode` CHAR(1),
	`cumInfected` INTEGER,
	`cumDestroyed` INTEGER,
	`cumVaccinated` INTEGER); 

insert into `dynHerd_IM0` ( `herdID`, `productionTypeID`, `latitude`, `longitude`, `initialStateCode`, `initialSize`, `finalStateCode`, `finalApparentStateCode`, `cumInfected`, `cumDestroyed`, `cumVaccinated`) 
    select `dynHerd`.`herdID`, 
    			 `dynHerd`.`productionTypeID`, 
           `dynHerd`.`latitude`, 
           `dynHerd`.`longitude`, 
           `dynHerd`.`initialStateCode`, 
           `dynHerd`.`initialSize`, 
           `dynHerd`.`finalStateCode`, 
           `dynHerd`.`finalApparentStateCode`, 
           `dynHerd`.`cumInfected`, 
           `dynHerd`.`cumDestroyed`, 
           `dynHerd`.`cumVaccinated`  
    from `dynHerd`;

alter table `outDailyExposures`
	drop constraint `dynHerd_outDailyExposures_FK1`;

alter table `outDailyExposures`
	drop constraint `dynHerd_outDailyExposures_FK2`;

alter table `outDailyEvents`
	drop constraint `dynHerd_outDailyEvents_FK1`;

alter table `dynHerd`
	drop constraint `inProductionType_dynHerd_FK1`;

drop table `dynHerd`; 

create table `dynHerd` ( 
	`herdID` COUNTER,
	`productionTypeID` INTEGER,
	`latitude` DOUBLE,
	`longitude` DOUBLE,
	`initialStateCode` CHAR(1),
	`daysLeftInInitialState` INTEGER,
	`initialSize` INTEGER,
	`finalStateCode` CHAR(1),
	`finalApparentStateCode` CHAR(1),
	`cumInfected` INTEGER,
	`cumDestroyed` INTEGER,
	`cumVaccinated` INTEGER); 

insert into `dynHerd` (`herdID`, `productionTypeID`, `latitude`, `longitude`, `initialStateCode`, `initialSize`, `finalStateCode`, `finalApparentStateCode`, `cumInfected`, `cumDestroyed`, `cumVaccinated`) 
    select `dynHerd_IM0`.`herdID`, 
    			 `dynHerd_IM0`.`productionTypeID`, 
           `dynHerd_IM0`.`latitude`, 
           `dynHerd_IM0`.`longitude`, 
           `dynHerd_IM0`.`initialStateCode`, 
           `dynHerd_IM0`.`initialSize`, 
           `dynHerd_IM0`.`finalStateCode`, 
           `dynHerd_IM0`.`finalApparentStateCode`, 
           `dynHerd_IM0`.`cumInfected`, 
           `dynHerd_IM0`.`cumDestroyed`, 
           `dynHerd_IM0`.`cumVaccinated`  
    from `dynHerd_IM0`;

drop table `dynHerd_IM0`; 

alter table `dynHerd`
	add constraint `dynHerd_PK` primary key (`herdID`) ; 

alter table `dynHerd`
	add constraint `inProductionType_dynHerd_FK1` foreign key (
		`productionTypeID`)
	 references `inProductionType` (
		`productionTypeID`); 

alter table `outDailyExposures`
	add constraint `dynHerd_outDailyExposures_FK1` foreign key (
		`exposedHerdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `outDailyExposures`
	add constraint `dynHerd_outDailyExposures_FK2` foreign key (
		`exposingHerdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `outDailyEvents`
	add constraint `dynHerd_outDailyEvents_FK1` foreign key (
		`herdID`)
	 references `dynHerd` (
		`herdID`); 
