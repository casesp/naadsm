--    This SQL DDL script was generated by Microsoft Visual Studio (Release Date: LOCAL BUILD).

--    Driver Used : Microsoft Visual Studio - Microsoft Access Driver.
--    Document    : C:\Documents and Settings\areeves\My Documents\NAADSM\NAADSMDatabaseSchemas\DBSchema4_0_6_GOLD.vsd.
--    Time Created: September 13, 2011 2:11 PM.
--    Operation   : From Visio Update Database Wizard.
--    Connected data source : naadsm-4_0_x
--    Connected server      : ACCESS
--    Connected database    : C:\Documents and Settings\areeves\My Documents\NAADSM\NAADSMDatabaseSchemas\naadsm-4_0_x.mdb



-- Update existing table `outDailyEvents`.
create table `outDailyEvents_IM0` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`event` INTEGER,
	`herdID` INTEGER,
	`zoneID` INTEGER,
	`eventCode` CHAR(1),
	`newStateCode` CHAR(1),
	`testResultCode` CHAR(1)); 

insert into `outDailyEvents_IM0` (`iteration`, `day`, `event`, `herdID`, `zoneID`, `eventCode`, `newStateCode`, `testResultCode`) 
    select `outDailyEvents`.`iteration`, 
           `outDailyEvents`.`day`, 
           `outDailyEvents`.`event`, 
           `outDailyEvents`.`herdID`, 
           `outDailyEvents`.`zoneID`, 
           `outDailyEvents`.`eventCode`, 
           `outDailyEvents`.`newStateCode`, 
           `outDailyEvents`.`testResultCode`  
    from `outDailyEvents`;


alter table `outDailyEvents`
	drop constraint `dynHerd_outDailyEvents_FK1`;


alter table `outDailyEvents`
	drop constraint `readEventCodes_outDailyEvents_FK1`;


alter table `outDailyEvents`
	drop constraint `readStatusCodes_outDailyEvents_FK1`;


alter table `outDailyEvents`
	drop constraint `inZone_outDailyEvents_FK1`;


alter table `outDailyEvents`
	drop constraint `readTestResultCodes_outDailyEvents_FK1`;


drop table `outDailyEvents`; 


-- `outDailyEvents` : Table of outDailyEvents
-- 	`iteration` : The iteration during which the outputs in this record were generated.  The first iteration is iteration number 1.
-- 	`day` : The day within the iteration on which these outputs were generated.  The first day of an iteration is day number 1.
-- 	`event` : A number used, in conjunction with iteration and day, to uniquely identify each event.
-- 	`herdID` : The ID number of the herd/unit for which this event occurred.  This field references dynHerd.herdID.
-- 	`zoneID` : zoneID is of outDailyEvents
-- 	`eventCode` : An event code indicating the type of event.  This field references readEventCodes.eventCode.
-- 	`newStateCode` : For transition state changes, this field indicates the state that results from the event.  This field references readStatusCodes.statusCode.
-- 	`testResultCode` : testResultCode is of outDailyEvents  
create table `outDailyEvents` ( 
	`iteration` INTEGER,
	`day` INTEGER,
	`event` INTEGER,
	`herdID` INTEGER,
	`zoneID` INTEGER,
	`eventCode` VARCHAR(3),
	`newStateCode` CHAR(1),
	`testResultCode` CHAR(1)); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`outDailyEvents`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'outDailyEvents' :
-- 	`iteration`
-- 	`day`
-- 	`event`
-- 	`herdID`
-- 	`eventCode`
-- 	`newStateCode`


insert into `outDailyEvents` (`iteration`, `day`, `event`, `herdID`, `zoneID`, `eventCode`, `newStateCode`, `testResultCode`) 
    select `outDailyEvents_IM0`.`iteration`, 
           `outDailyEvents_IM0`.`day`, 
           `outDailyEvents_IM0`.`event`, 
           `outDailyEvents_IM0`.`herdID`, 
           `outDailyEvents_IM0`.`zoneID`, 
           `outDailyEvents_IM0`.`eventCode`, 
           `outDailyEvents_IM0`.`newStateCode`, 
           `outDailyEvents_IM0`.`testResultCode`  
    from `outDailyEvents_IM0`;


drop table `outDailyEvents_IM0`; 


alter table `outDailyEvents`
	add constraint `outDailyEvents_PK` primary key (`day`, `iteration`, `event`) ; 


-- Update existing table `readEventCodes`.
create table `readEventCodes_IM0` ( 
	`eventCode` CHAR(1),
	`definition` VARCHAR(255)); 

insert into `readEventCodes_IM0` (`eventCode`, `definition`) 
    select `readEventCodes`.`eventCode`, 
           `readEventCodes`.`definition`  
    from `readEventCodes`;


drop table `readEventCodes`; 


-- `readEventCodes` : Table of readEventCodes
-- 	`eventCode` : Single character code used to indicate an event: see Table XX.
-- 	`definition` : Description of the event.  
create table `readEventCodes` ( 
	`eventCode` VARCHAR(3),
	`definition` VARCHAR(255)); 

-- Note: Access does not support the mandatory (not null) constraint in SQL DDL.
-- The mandatory constraints for table '`readEventCodes`' will be created in the database using DAO
-- only if there is a connection to the Access MDB file during DDL generation.
-- Not nullable columns for table 'readEventCodes' :
-- 	`eventCode`


insert into `readEventCodes` (`eventCode`, `definition`) 
    select `readEventCodes_IM0`.`eventCode`, 
           `readEventCodes_IM0`.`definition`  
    from `readEventCodes_IM0`;


drop table `readEventCodes_IM0`; 


alter table `readEventCodes`
	add constraint `readEventCodes_PK` primary key (`eventCode`) ; 


-- Restore foreign key constraints for existing tables
alter table `outDailyEvents`
	add constraint `dynHerd_outDailyEvents_FK1` foreign key (
		`herdID`)
	 references `dynHerd` (
		`herdID`); 

alter table `outDailyEvents`
	add constraint `readEventCodes_outDailyEvents_FK1` foreign key (
		`eventCode`)
	 references `readEventCodes` (
		`eventCode`); 

alter table `outDailyEvents`
	add constraint `readStatusCodes_outDailyEvents_FK1` foreign key (
		`newStateCode`)
	 references `readStatusCodes` (
		`statusCode`); 

alter table `outDailyEvents`
	add constraint `inZone_outDailyEvents_FK1` foreign key (
		`zoneID`)
	 references `inZone` (
		`zoneID`); 

alter table `outDailyEvents`
	add constraint `readTestResultCodes_outDailyEvents_FK1` foreign key (
		`testResultCode`)
	 references `readTestResultCodes` (
		`testResultCode`); 

insert into readEventCodes ( eventCode, definition ) values ( "EC", "Detection based on clinical signs" );
insert into readEventCodes ( eventCode, definition ) values ( "ET", "Detection based on diagnostic test" );
insert into readEventCodes ( eventCode, definition ) values ( "ED", "Detection based on death from disease" );
insert into readEventCodes ( eventCode, definition ) values ( "EDD", "Detection by destruction crew based on death from disease" );
insert into readEventCodes ( eventCode, definition ) values ( "EDV", "Detection by vaccination crew based on death from disease" );

update outDailyEvents set eventCode = "EC" where eventCode = "E";

delete from readEventCodes where eventCode = "E";

-- This is the end of the Microsoft Visual Studio generated SQL DDL script.
