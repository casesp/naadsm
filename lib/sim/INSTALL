Like most Unix programs, the simulator can be built and installed by:

./configure
make
make install

If you have checked the simulator out of CVS instead of unpacking it from a
distribution tar file, you may need to type

sh bootstrap

first.

Configuration options
=====================

When you configure, the options you should know about are:

--prefix=PATH

The default is to install to /usr/local (i.e., the executable `sim' goes in
/usr/local/bin, the supporting libraries in /usr/local/lib).  The install
process will create bin, lib, and include directories inside the installation
folder if they do not already exist.

--with-mpi=PATH

Specifies the location of the system's MPI library and header file.  The
library is assumed to be named PATH/lib/libmpi.xxx and the header file is
assumed to be named PATH/include/mpi.h.

You can use the `--with-mpi-cflags' and `--with-mpi-libs' options instead for
finer control, e.g.,

--with-mpi-cflags=-I/usr/lib/mpi/include
--with-mpi-libs="-L/usr/lib/mpi/lib -lmpi"

The default is to compile without MPI support.

There are special --with-xxx-cflags and --with-xxx-libs options for specifying
the locations of header files and libraries for some other components (SPRNG,
GSL), too.  If there aren't explicit options for a particular library, you can
add the appropriate -I and -L options to the CPPFLAGS and LDFLAGS environment
variables before running configure.

--disable-debug
--disable-info

The debug levels are quite verbose and are useful with small, short test cases,
but they slow the simulator down considerably.  These switches disable
debugging information to produce a much faster-running program.

See

./configure --help

for other options.

Dependencies
============

If the simulator needs libraries that aren't present on your system, the
configure script will stop and inform you.  Some libraries may be available as
packages for your system; others you may need to download and compile.

For easy reference, the required libraries and the download location for their
sources are:

GLib 2.4
ftp://ftp.gnome.org/pub/gnome/sources/glib/2.4/

GSL (GNU Scientific Library) 1.4
ftp://ftp.gnu.org/gnu/gsl/

SPRNG (Scalable Parallel Random Number Generators) 2.0
http://sprng.cs.fsu.edu/
(follow the `Version 2.0' link, then the `Download' link)

popt 1.7
ftp://ftp.rpm.org/pub/rpm/dist/rpm-4.1.x/

Expat XML Parser 1.95
http://sourceforge.net/project/showfiles.php?group_id=10127

SCEW (Simple C Expat Wrapper) 0.3.1
http://savannah.nongnu.org/download/scew/

GD Graphics Library 2.0.33
http://www.boutell.com/gd/

Shapefile C Library 1.2
http://shapelib.maptools.org/

(All version numbers come with an implied "or higher".)

Documentation
=============

The documentation includes many diagrams, and many of the diagrams are built
from gnuplot or Dia (http://www.gnome.org/projects/dia/) source files as part
of the "make" process.

If you don't have dia installed, make will stop and complain.  But that's not a
problem: the diagrams are deliberately the last step in the build process, so
if you get to that point, the executable program is already built.

Testing the program
===================

If the dejagnu testing framework (http://www.gnu.org/software/dejagnu/ ) is
available on your system, you can run the regression test suite.

After compiling, cd to the `models' directory and type `make check' to test
that the simulator is working.  It will run the tests and output a report file
named "model.sum".

(Note that "make check" will run a copy of the simulator built without MPI, so
it will run just on the node you're logged into -- you don't need to worry
about how to submit it to your cluster's job-control system.)

Up to 8 of the tests may fail with an error message like "outcome 1 should
occur with frequency 0.5, not 0.6".  These are not necessarily cause for alarm!
They're from stochastic tests, where we run a scenario many times and check
that each actual outcome matches one of n expected outcomes, and that the
outcomes occur with the expected frequencies.

I've found that you may need 100,000 iterations or more before the actual
frequencies get "close enough" to the expected frequencies to pass the test.
But that takes a long time, and if you don't know it's happening you may look
at the testing and think it has locked up.  If you want to run the stochastic
tests with enough iterations to get proper results, open the file

sim/models/test/config/unix.exp

in a text editor and find the function "stochastic_progress_test" (search for
the line that begins with "proc stochastic_progress_test").  Edit the part that
says "{iterations 100}", replacing 100 with a higher number of iterations.  Do
the same for the function "stochastic_variable_test".

Another 3 tests that calculate the area of zones may also fail.  Zone circles
are approximated by polygons, and so the calculated area will not be exactly
the same as the "true" values based on circles.
