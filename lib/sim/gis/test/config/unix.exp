#
# Set up some global variables.  These variables could be set on the command
# line, so we set them only if they don't already exist.
#
if ![info exists prompt] then {
	set prompt "> "
}

if ![info exists floatpat] then {
	set floatpat "\[+-\]?\[0-9\]+(?:.\[0-9\]+)?(?:\[eE\]\[+-\]\[0-9\]+)?"
}

if ![info exists epsilon] then {
	set epsilon 0.0001
}

set pi 3.14159265358979
set earth_radius 6378.137
set dd [expr 2 * $pi * $earth_radius / 360.0]
set deg2rad [expr $pi / 180.0]



#
# fcmp -- compares two floating-point numbers.
#
# Parameters:
#   a,b  the numbers to compare
#   tol  the tolerance
# Returns:
#   0 if they are approximately equal; otherwise, returns -1 if a < b, +1 if
#   a > b.
#
proc fcmp { a b tol } {
	return [exec [file join test fcmp] $a $b $tol]
}



#
# simple_distance_test -- tests the square-grid approximate distance function
#   (in which meridians do not converge).
#
# Parameters:
#   lat1          latitude of point 1, in degrees
#   lon1          longitude of point 1, in degrees
#   lat2          latitude of point 2, in degrees
#   lon2          longitude of point 2, in degrees
#   distance      the distance in km between the points
#   test          a name to report in passes/fails.  (default = "simple_distance")
# Returns:
#   nothing
#
proc simple_distance_test { lat1 lon1 lat2 lon2 distance {test "simple_distance"} } {
	global prompt
	global floatpat
	global epsilon

	send "simple distance ($lat1,$lon1,$lat2,$lon2)\n"
	expect {
		-re "($floatpat)\[\\n\\r\]+$prompt$" {
			set answer $expect_out(1,string)
			if { [fcmp $distance $answer $epsilon] == 0 } {
				pass $test
			} else {
				fail "$test distance between ($lat1,$lon1) and ($lat2,$lon2) = $distance, not $answer"
			}			
		}
	}
}



#
# local_distance_test -- tests the local flat-Earth approximate distance
#   function (in which meridians converge).
#
# Parameters:
#   lat1          latitude of point 1, in degrees
#   lon1          longitude of point 1, in degrees
#   lat2          latitude of point 2, in degrees
#   lon2          longitude of point 2, in degrees
#   distance      the distance in km between the points
#   test          a name to report in passes/fails.  (default = "local_distance")
# Returns:
#   nothing
#
proc local_distance_test { lat1 lon1 lat2 lon2 distance {test "local_distance"} } {
	global prompt
	global floatpat
	global epsilon

	send "local distance ($lat1,$lon1,$lat2,$lon2)\n"
	expect {
		-re "($floatpat)\[\\n\\r\]+$prompt$" {
			set answer $expect_out(1,string)
			if { [fcmp $distance $answer $epsilon] == 0 } {
				pass $test
			} else {
				fail "$test distance between ($lat1,$lon1) and ($lat2,$lon2) = $distance, not $answer"
			}			
		}
	}
}



#
# simple_heading_test -- tests the square-grid approximate heading function
#   (in which meridians do not converge).
#
# Parameters:
#   lat1          latitude of point 1, in degrees
#   lon1          longitude of point 1, in degrees
#   lat2          latitude of point 2, in degrees
#   lon2          longitude of point 2, in degrees
#   heading       the heading in degrees from point 1 to point 2, where
#                 0/360 = N, 90 = E, 180 = S, 270 = W.
#   test          a name to report in passes/fails.  (default = "simple_heading")
# Returns:
#   nothing
#
proc simple_heading_test { lat1 lon1 lat2 lon2 heading {test "simple_heading"} } {
	global prompt
	global floatpat
	global epsilon

	send "simple heading ($lat1,$lon1,$lat2,$lon2)\n"
	expect {
		-re "($floatpat)\[\\n\\r\]+$prompt$" {
			set answer $expect_out(1,string)

			#
			# Accept 360 for 0.
			#
			if { [fcmp $answer 360 $epsilon] == 0 } {
				set answer 0
			}
 
			if { [fcmp $heading $answer $epsilon] == 0 } {
				pass $test
			} else {
				fail "$test heading from ($lat1,$lon1) to ($lat2,$lon2) = $heading, not $answer"
			}			
		}
	}
}



#
# local_heading_test -- tests the local flat-Earth approximate heading function
#   (in which meridians converge).
#
# Parameters:
#   lat1          latitude of point 1, in degrees
#   lon1          longitude of point 1, in degrees
#   lat2          latitude of point 2, in degrees
#   lon2          longitude of point 2, in degrees
#   heading       the heading in degrees from point 1 to point 2, where
#                 0/360 = N, 90 = E, 180 = S, 270 = W.
#   test          a name to report in passes/fails.  (default = "local_heading")
# Returns:
#   nothing
#
proc local_heading_test { lat1 lon1 lat2 lon2 heading {test "local_heading"} } {
	global prompt
	global floatpat
	global epsilon

	send "local heading ($lat1,$lon1,$lat2,$lon2)\n"
	expect {
		-re "($floatpat)\[\\n\\r\]+$prompt$" {
			set answer $expect_out(1,string)

			#
			# Accept 360 for 0.
			#
			if { [fcmp $answer 360 $epsilon] == 0 } {
				set answer 0
			}
 
			if { [fcmp $heading $answer $epsilon] == 0 } {
				pass $test
			} else {
				fail "$test heading from ($lat1,$lon1) to ($lat2,$lon2) = $heading, not $answer"
			}			
		}
	}
}



#
# polygon_area_test -- tests the basic polygon area function.
#
# Parameters:
#   points        points of the polygon, as { x0 y0 x1 y1 ... }
#   area          the correct area of the polygon
#   test          a name to report in passes/fails.  (default = "polygon_area")
# Returns:
#   nothing
#
proc polygon_area_test { points area {test "polygon_area"} } {
	global prompt
	global floatpat
	global epsilon

	send "area ([join $points ,])\n"
	expect {
		-re "($floatpat)\[\\n\\r\]+$prompt$" {
			set answer $expect_out(1,string)

			if { [fcmp $area $answer $epsilon] == 0 } {
				pass $test
			} else {
				fail "$test area of polygon = $area, not $answer"
			}			
		}
	}
}



#
# simple_polygon_area_test -- tests the polygon area function that uses a
#   square-grid approximation (in which meridians do not converge).
#
# Parameters:
#   points        points of the polygon, as { lat0 lon0 lat1 lon1 ... }
#   area          the correct area of the polygon, in square km
#   test          a name to report in passes/fails.  (default = "simple_polygon_area")
# Returns:
#   nothing
#
proc simple_polygon_area_test { points area {test "simple_polygon_area"} } {
	global prompt
	global floatpat
	global epsilon

	send "simple area ([join $points ,])\n"
	expect {
		-re "($floatpat)\[\\n\\r\]+$prompt$" {
			set answer $expect_out(1,string)

			if { [fcmp $area $answer $epsilon] == 0 } {
				pass $test
			} else {
				fail "$test area of polygon = $area sq km, not $answer"
			}			
		}
	}
}



#
# local_polygon_area_test -- tests the polygon area function that uses a
#   local flat-Earth approximation (in which meridians converge).
#
# Parameters:
#   points        points of the polygon, as { lat0 lon0 lat1 lon1 ... }
#   area          the correct area of the polygon, in square km
#   test          a name to report in passes/fails.  (default = "local_polygon_area")
# Returns:
#   nothing
#
proc local_polygon_area_test { points area {test "local_polygon_area"} } {
	global prompt
	global floatpat
	global epsilon

	send "local area ([join $points ,])\n"
	expect {
		-re "($floatpat)\[\\n\\r\]+$prompt$" {
			set answer $expect_out(1,string)

			if { [fcmp $area $answer $epsilon] == 0 } {
				pass $test
			} else {
				fail "$test area of polygon = $area sq km, not $answer"
			}			
		}
	}
}



#
# shell_load -- loads the program
#
proc shell_load { arg } {
	#
}



#
# shell_exit -- quit and cleanup
#
proc shell_exit {} {
	#
}



proc shell_start {} {
	global SHELL
	global prompt
	global floatpat
	global epsilon
	global spawn_id
	global verbose
	
	if { $verbose > 1 } {
		send_user "starting $SHELL\n"
	}
	spawn $SHELL
	expect {
		-re "No such file.*" { perror "Can't start $SHELL"; exit 1 }
		-re "$prompt$" { }
		timeout { perror "Failed to spawn $SHELL (timeout)"; exit 1 }
	}
}



shell_start
